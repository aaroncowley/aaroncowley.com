{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to My Website! I will put useful articles here every once in awhile, feel free to look around!","title":"Home"},{"location":"#welcome-to-my-website","text":"I will put useful articles here every once in awhile, feel free to look around!","title":"Welcome to My Website!"},{"location":"about/","text":"About","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"aaronBTFM/","text":"Aaron's Blue Team Field Manual Intro I decided to create my printable CCDC binder as a slick markdown document that I can export to PDF via pandoc. I also wanted to compile some of my common google searches into a resource I can access quicker and can git pull for easy copying and pasting of commands. This is not to be an all inclusive document or even to really replace the original BTFM, it is simply the stuff I would like to have access to easily. Credits https://www.nationalccdc.org/ for providing me with so many learning opportunities and the reason to make this manual","title":"Aaron's Blue Team Field Manual"},{"location":"aaronBTFM/#aarons-blue-team-field-manual","text":"","title":"Aaron's Blue Team Field Manual"},{"location":"aaronBTFM/#intro","text":"I decided to create my printable CCDC binder as a slick markdown document that I can export to PDF via pandoc. I also wanted to compile some of my common google searches into a resource I can access quicker and can git pull for easy copying and pasting of commands. This is not to be an all inclusive document or even to really replace the original BTFM, it is simply the stuff I would like to have access to easily.","title":"Intro"},{"location":"aaronBTFM/#credits","text":"https://www.nationalccdc.org/ for providing me with so many learning opportunities and the reason to make this manual","title":"Credits"},{"location":"aaronBTFM/aaronBTFM/","text":"Aaron Cowley's Blue Team Field Manual Tools This section covers quick installation and usage guides for my favorite tools Bro/Zeek Installation from source Dependencies: + RPM/Redhat Linux sudo yum install cmake make gcc gcc-c++ flex bison libpcap-devel openssl-devel python-devel swig zlib-devel curl APT/Debain Linux sudo apt-get install cmake make gcc g++ flex bison libpcap-dev libssl-dev python-dev swig zlib1g-dev curl Install: git clone --recursive https://github.com/zeek/zeek && cd zeek ./configure make sudo make install Add zeek to path: export PATH=/usr/local/zeek/bin:$PATH Basic Usage: + set the interface in node.cfg vim /usr/local/zeek/etc/node.cfg Comment out defaults and add network for zeek to monitor vim /usr/local/zeek/etc/networks.cfg change mailto to whoever you want and set log rotation interval vim /usr/local/zeek/etc/zeekctl.cfg","title":"Aaron Cowley BTFM"},{"location":"aaronBTFM/aaronBTFM/#aaron-cowleys-blue-team-field-manual","text":"","title":"Aaron Cowley's Blue Team Field Manual"},{"location":"aaronBTFM/aaronBTFM/#tools","text":"This section covers quick installation and usage guides for my favorite tools","title":"Tools"},{"location":"aaronBTFM/aaronBTFM/#brozeek","text":"","title":"Bro/Zeek"},{"location":"aaronBTFM/aaronBTFM/#installation-from-source","text":"Dependencies: + RPM/Redhat Linux sudo yum install cmake make gcc gcc-c++ flex bison libpcap-devel openssl-devel python-devel swig zlib-devel curl APT/Debain Linux sudo apt-get install cmake make gcc g++ flex bison libpcap-dev libssl-dev python-dev swig zlib1g-dev curl Install: git clone --recursive https://github.com/zeek/zeek && cd zeek ./configure make sudo make install Add zeek to path: export PATH=/usr/local/zeek/bin:$PATH Basic Usage: + set the interface in node.cfg vim /usr/local/zeek/etc/node.cfg Comment out defaults and add network for zeek to monitor vim /usr/local/zeek/etc/networks.cfg change mailto to whoever you want and set log rotation interval vim /usr/local/zeek/etc/zeekctl.cfg","title":"Installation from source"},{"location":"articles/archlinuxinstall/","text":"How to install Arch Linux Introduction Arch linux is probably the best Operating System out there for power users, programmers, and people who like to do things the hard way. Gentoo is another great DIY distro for those with a few hours - days to spare. I like to have any given system up and running within an hour or less and Arch Linux, once mastered, shouldnt take anyone too long to install and configure. Its install process compared to installers from other battle-tested distroburions, like Debian, is a lot more manual and therefore, more customizable. A Linux install, regardless of the distro, follows the same basic steps. With Arch you do these yourself and essentially build your own system from the ground up. This guide is for those of us who love Arch Linux and want a trimmed installation guide with just the commands needed to get a minimal install on a modern x86_64 EFI system up and running speedily. The goal of this guide is to be less wordy than most Arch Linux install guides so that one can quickly go from command to command without much searching. If you have questions consult the official Arch Linux install guide . Writing to a USB Insert the USB to be used for writing. Run: lsblk to find your USB drive's letter. Run the command below from a Linux terminal, of course replacign the \"X\" with the letter of your USB drive sudo dd if=\"put your arch iso here\" of=/dev/sdX bs=4M status=progress && sync Boot up the Installer You should be greeted by the \"root@archiso\" prompt. Run: efivar -l If you are presented with an alarmingly large wall of text that means you booted into EFI mode, congrats. If you arent connected to ethernet, you should connect to ethernet. If you are stubborn and want to setup wireless this second refer to here Then run: ping archlinux.org If you receive some responses then you are ready to proceed to the next step. If not consult here Keymaps If you do not use the standard English Qwerty layout run: loadkeys <your 2 letter layout here> Else, continue to the next section Partitioning I find parted to be the easiest tool for the job. I typically stick with the simple boot, root, swap partition architecure. Your swap space should generally be the same as your RAM if you want to be able to hibernate a computer under a full workload. List the current Drives. You don't want to install Arch onto your USB do you ;) lsblk Your harddrive/ssd should be /dev/sda but if not remember its letter. /dev/sda will be used for the remainder of the guide. Open parted with reference to your drive: parted /dev/sda Run the print command within parted to find your disk's size. (parted) print Wipe your entire disk, and create a GPT table. (parted) mklabel gpt Create your partition table, replace size with the value of your total disk space - your RAM (parted) mkpart ESP fat32 1049kB 538MB (parted) set 1 boot on (parted) mkpart primary ext4 538MB [SIZE] (parted) mkpart primary linux-swap [SIZE] 100% (parted) quit Run lsblk again to check your results of the above: lsblk /dev/sda Now actually create these partitions via bash: mkfs.vfat -F32 /dev/sda1 mkfs.ext4 /dev/sda2 mkswap /dev/sda3 swapon /dev/sda3 Install Arch Get excited its pacstrap time. Mount the root \"/\" partition: mount /dev/sda2 /mnt Mount the \"/boot\" partition: mkdir -p /mnt/boot mount /dev/sda1 /mnt/boot Install the base system: pacstrap /mnt base base-devel Generate the fstab: genfstab -U -p /mnt >> /mnt/etc/fstab Edit the fstab file so that the / partition ends with 2, the boot ends with 1 and swap ends in 0 If you would like the fstab to be optimized for ssd use add discard to the end of the ext4 partition. Below is my current fstab # Static information about the filesystems. # See fstab(5) for details. # <file system> <dir> <type> <options> <dump> <pass> # /dev/sda2 UUID / ext4 rw,relatime,data=ordered,discard 0 2 # /dev/sda1 UUID /boot vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro 0 1 # /dev/sda3 UUID none swap defaults,pri=-2 0 0 Base System Configuration Enter the new system with arch-chroot: To prioritize, we need vim before anything else, this step is very important. pacman -S gvim arch-chroot /mnt Open locale.gen: vim /etc/locale.gen Uncomment each locale, the en_US.UTF-8 UTF-8 locale is at the top of the file so uncommenting it here is the easiest place to do so for a standard english language system. Save and exit the file and generate the locales from bash: locale-gen Create the locale.conf file with your chosen locale: echo LANG=en_US.UTF-8 > /etc/locale.conf The above works only if you selected the english UTF-8 locale. Go ahead and export it for the current session as well: export LANG=en_US.UTF-8 Set the timezone with the below command. If your timezone differs from mine then browse to /usr/share/zoneinfo/ and you will see all of the zones, cd into the zone and then find your subzone. ln -s /usr/share/zoneinfo/Zone/SubZone /etc/localtime Now set the hardware clock: hwclock --systohc --utc System Administration First set an admin password: passwd Name your new system with the following: echo good-system-name > /etc/hostname Edit the /etc/hosts file to also refer to your new hostname. Add these lines if they are not there. If they are then append your chosen name onto the end of the lines. 127.0.0.1 localhost.localdomain localhost good-system-name ::1 localhost.localdomain localhost good-system-name Install Network Manager pacman -S networkmanager systemctl enable networkmanager Use systemd-boot to set up your EFI system pacman -S dosfstools bootctl --path=/boot install vim /boot/loader/entries/arch.conf This all will have installed a bootloader and opened up a new boot loader conffile for systemd to boot the system. Add the following lines for a nice speedy boot. title Arch Linux linux /vmlinuz-linux initrd /initramfs-linux.img options root=/dev/sda2 rw elevator=deadline quiet splash resume=/dev/sda3 nmi_watchdog=0 Save and exit and now configure systemd boot to find our config file: echo \"default arch\" > /boot/loader/loader.conf Reboot with the following commands: exit reboot Finishing Up Create a new user groupadd users useradd -m -g users -G wheel -s /bin/bash goodUsername Install sudo and open up the sudoers file. pacman -S sudo vim /etc/sudoers Uncomment the line: %wheel ALL=(ALL) ALL Save and exit. This line allows your user to execute commands from roor with: sudo <command> Create a password for your new user with: passwd goodUsername Lock up root logins with: passwd -l root Update your system and install packer (the best aur helper): sudo pacman -Syu sudo pacman -S fakeroot jshon expac git wget mkdir packer && cd packer wget https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=packer mv PKGBUILD\\?h\\=packer PKGBUILD makepkg sudo pacman -U packer-*.pkg.tar.xz cd .. && rm -rf packer You now have a very minimal but complete Arch Linux install. Look into some window managers or desktop environments to install onto your base system to use it as a desktop, or look into using it as a server .","title":"Arch Linux Install Guide"},{"location":"articles/archlinuxinstall/#how-to-install-arch-linux","text":"","title":"How to install Arch Linux"},{"location":"articles/archlinuxinstall/#introduction","text":"Arch linux is probably the best Operating System out there for power users, programmers, and people who like to do things the hard way. Gentoo is another great DIY distro for those with a few hours - days to spare. I like to have any given system up and running within an hour or less and Arch Linux, once mastered, shouldnt take anyone too long to install and configure. Its install process compared to installers from other battle-tested distroburions, like Debian, is a lot more manual and therefore, more customizable. A Linux install, regardless of the distro, follows the same basic steps. With Arch you do these yourself and essentially build your own system from the ground up. This guide is for those of us who love Arch Linux and want a trimmed installation guide with just the commands needed to get a minimal install on a modern x86_64 EFI system up and running speedily. The goal of this guide is to be less wordy than most Arch Linux install guides so that one can quickly go from command to command without much searching. If you have questions consult the official Arch Linux install guide .","title":"Introduction"},{"location":"articles/archlinuxinstall/#writing-to-a-usb","text":"Insert the USB to be used for writing. Run: lsblk to find your USB drive's letter. Run the command below from a Linux terminal, of course replacign the \"X\" with the letter of your USB drive sudo dd if=\"put your arch iso here\" of=/dev/sdX bs=4M status=progress && sync","title":"Writing to a USB"},{"location":"articles/archlinuxinstall/#boot-up-the-installer","text":"You should be greeted by the \"root@archiso\" prompt. Run: efivar -l If you are presented with an alarmingly large wall of text that means you booted into EFI mode, congrats. If you arent connected to ethernet, you should connect to ethernet. If you are stubborn and want to setup wireless this second refer to here Then run: ping archlinux.org If you receive some responses then you are ready to proceed to the next step. If not consult here","title":"Boot up the Installer"},{"location":"articles/archlinuxinstall/#keymaps","text":"If you do not use the standard English Qwerty layout run: loadkeys <your 2 letter layout here> Else, continue to the next section","title":"Keymaps"},{"location":"articles/archlinuxinstall/#partitioning","text":"I find parted to be the easiest tool for the job. I typically stick with the simple boot, root, swap partition architecure. Your swap space should generally be the same as your RAM if you want to be able to hibernate a computer under a full workload. List the current Drives. You don't want to install Arch onto your USB do you ;) lsblk Your harddrive/ssd should be /dev/sda but if not remember its letter. /dev/sda will be used for the remainder of the guide. Open parted with reference to your drive: parted /dev/sda Run the print command within parted to find your disk's size. (parted) print Wipe your entire disk, and create a GPT table. (parted) mklabel gpt Create your partition table, replace size with the value of your total disk space - your RAM (parted) mkpart ESP fat32 1049kB 538MB (parted) set 1 boot on (parted) mkpart primary ext4 538MB [SIZE] (parted) mkpart primary linux-swap [SIZE] 100% (parted) quit Run lsblk again to check your results of the above: lsblk /dev/sda Now actually create these partitions via bash: mkfs.vfat -F32 /dev/sda1 mkfs.ext4 /dev/sda2 mkswap /dev/sda3 swapon /dev/sda3","title":"Partitioning"},{"location":"articles/archlinuxinstall/#install-arch","text":"Get excited its pacstrap time. Mount the root \"/\" partition: mount /dev/sda2 /mnt Mount the \"/boot\" partition: mkdir -p /mnt/boot mount /dev/sda1 /mnt/boot Install the base system: pacstrap /mnt base base-devel Generate the fstab: genfstab -U -p /mnt >> /mnt/etc/fstab Edit the fstab file so that the / partition ends with 2, the boot ends with 1 and swap ends in 0 If you would like the fstab to be optimized for ssd use add discard to the end of the ext4 partition. Below is my current fstab # Static information about the filesystems. # See fstab(5) for details. # <file system> <dir> <type> <options> <dump> <pass> # /dev/sda2 UUID / ext4 rw,relatime,data=ordered,discard 0 2 # /dev/sda1 UUID /boot vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro 0 1 # /dev/sda3 UUID none swap defaults,pri=-2 0 0","title":"Install Arch"},{"location":"articles/archlinuxinstall/#base-system-configuration","text":"Enter the new system with arch-chroot: To prioritize, we need vim before anything else, this step is very important. pacman -S gvim arch-chroot /mnt Open locale.gen: vim /etc/locale.gen Uncomment each locale, the en_US.UTF-8 UTF-8 locale is at the top of the file so uncommenting it here is the easiest place to do so for a standard english language system. Save and exit the file and generate the locales from bash: locale-gen Create the locale.conf file with your chosen locale: echo LANG=en_US.UTF-8 > /etc/locale.conf The above works only if you selected the english UTF-8 locale. Go ahead and export it for the current session as well: export LANG=en_US.UTF-8 Set the timezone with the below command. If your timezone differs from mine then browse to /usr/share/zoneinfo/ and you will see all of the zones, cd into the zone and then find your subzone. ln -s /usr/share/zoneinfo/Zone/SubZone /etc/localtime Now set the hardware clock: hwclock --systohc --utc","title":"Base System Configuration"},{"location":"articles/archlinuxinstall/#system-administration","text":"First set an admin password: passwd Name your new system with the following: echo good-system-name > /etc/hostname Edit the /etc/hosts file to also refer to your new hostname. Add these lines if they are not there. If they are then append your chosen name onto the end of the lines. 127.0.0.1 localhost.localdomain localhost good-system-name ::1 localhost.localdomain localhost good-system-name Install Network Manager pacman -S networkmanager systemctl enable networkmanager Use systemd-boot to set up your EFI system pacman -S dosfstools bootctl --path=/boot install vim /boot/loader/entries/arch.conf This all will have installed a bootloader and opened up a new boot loader conffile for systemd to boot the system. Add the following lines for a nice speedy boot. title Arch Linux linux /vmlinuz-linux initrd /initramfs-linux.img options root=/dev/sda2 rw elevator=deadline quiet splash resume=/dev/sda3 nmi_watchdog=0 Save and exit and now configure systemd boot to find our config file: echo \"default arch\" > /boot/loader/loader.conf Reboot with the following commands: exit reboot","title":"System Administration"},{"location":"articles/archlinuxinstall/#finishing-up","text":"Create a new user groupadd users useradd -m -g users -G wheel -s /bin/bash goodUsername Install sudo and open up the sudoers file. pacman -S sudo vim /etc/sudoers Uncomment the line: %wheel ALL=(ALL) ALL Save and exit. This line allows your user to execute commands from roor with: sudo <command> Create a password for your new user with: passwd goodUsername Lock up root logins with: passwd -l root Update your system and install packer (the best aur helper): sudo pacman -Syu sudo pacman -S fakeroot jshon expac git wget mkdir packer && cd packer wget https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=packer mv PKGBUILD\\?h\\=packer PKGBUILD makepkg sudo pacman -U packer-*.pkg.tar.xz cd .. && rm -rf packer You now have a very minimal but complete Arch Linux install. Look into some window managers or desktop environments to install onto your base system to use it as a desktop, or look into using it as a server .","title":"Finishing Up"},{"location":"articles/secEng/","text":"Security Engineering Intro This is going to be my brain dump of useful interview tips, articles, and papers that I come across that I have found useful in my studies for getting a security engineering job. Security Engineering is one of the hardest paths in computing to break into on your own. I hope this article is helpful to any that stumble upon it. General Interview Tips Stay calm and dont take things personally Dont be phased by interviews that dont go well Focus on what you do know and what you are great at Systems Administration & DevOps Cybersecurity requires top notch systems administration skills in order to be successful in implementing new protections on the end devices that need protecting. DevOps knowledge is key if one is to fully understand the systems that they are working with and attempting to ingest logs from. The more stacks and technologies you know the more things you can secure. General Cloud the cloud is just another way of saying \"someone else is managing my hardware\" Azure This is microsofts cloud platform. It is essentially a more windows enterprise friendly AWS and its admin console can be AWS lambda functions javascripts that run when an endpoint is hit They serverless backend functions essentially publically accessable Ansible system administration automation its just a fancy python script that reads a yaml file + Log Analysis Windows Linux Programming Tips Algos Fastest sort quick sort in most cases Python syntax specifics decorators function wrappers that are functions allow for returning new data and running other functions inside of itself ```python @make_pretty def ordinary(): print(\"I am ordinary\") is the same as def ordinary(): print(\"I am ordinary\") ordinary = make_pretty(ordinary) ``` Networking Tips How does traceroute work (different on windows and unix) TCP Flags Syn Synchronize Ack Acknowledge successful receipt of a packet Rst Sent when a packet is received that the receiver was not expecting Urg The receiver will be notified to process the urgent packets before others and will be notified when urgent data has been received Psh Push flag is like the Urg flag but the packets are processed as soon as they are received Fin The finished flag which indicates that there is no more data to be sent after this from the current data stream ECE indicates that peer is ECN capable TTL A part of the IP section of a packet and indicates if the packet is too late to be considered valid Commonly set manually for DNS Records in a resolvers cache speeds up website lookup speed should be set to lower number for local lookups CIDR Classless Interdomain routing No need for class based A, B, C IP worries Define network address as prefix /24 is 24 network bits 8 host bits Security Applications & What they do Firewall Network edge device Commonly hosts VPN server Analyze traffic based upon rules and filter traffic coming from unsecured or suspicious sources Next Gen firewalls use deep packet inspection which looks at the data within the packet itself IDS Network Intrusion Detection System -> NIDS Snort surricata Host Intrusion Detection Systesm -> HIDS File integrity monitoring windows reigstry monitoring Monitoring the state of the system OSSEC + Atomicorp chkrootkit IPS sits between the edge device of the network (usually firewall) and the devices on the inside It can identify threats in a number of ways: Packet analysis looks at packets for binary patterns compared against a database of common signatures Statistical anomaly detection takes samples of network traffic randomly and compares them to pre-calculated baseline performance level. SIEM Splunk ELK Stack SOAR tools phantom socless Crypto Basics Common Algorithms HTTPS Hello Contains SSL information about client include sipher suites and max SSL supported Server hello contains the same information and the intended cipher suite and SSL version to be used Cert exchange Server sends over its SSL Cert name of owner the property (domain its attached to) certificate pub key digital signature certificate validity dates Client checks if it has the CA already trusted Server may request that the client proves itself with the same process key exchange Authentication methods LDAP LDAPS OAUTH The first website connects to the second website on behalf of the user, using OAuth, providing the user\u2019s verified identity. The second site generates a one-time token and a one-time secret unique to the transaction and parties involved. The first site gives this token and secret to the initiating user\u2019s client software. The client\u2019s software presents the request token and secret to their authorization provider (which may or may not be the second site). If not already authenticated to the authorization provider, the client may be asked to authenticate. After authentication, the client is asked to approve the authorization transaction to the second website. The user approves (or their software silently approves) a particular transaction type at the first website. The user is given an approved access token (notice it\u2019s no longer a request token). The user gives the approved access token to the first website. The first website gives the access token to the second website as proof of authentication on behalf of the user. The second website lets the first website access their site on behalf of the user. The user sees a successfully completed transaction occurring. OAuth is not the first authentication/authorization system to work this way on behalf of the end-user. In fact, many authentication systems, notably Kerberos, work similarly. What is special about OAuth is its ability to work across the web and its wide adoption. It succeeded with adoption rates where previous attempts failed (for various reasons). Web Attacks Tips Anatomy of SQLi and blind SQLi attacks Anatomy of XSS attack Anatomy of CSRF attack How do you prevent a CSRF attack? Make sure all XSS vulnerabilities have been patched. An XSS can read any page on the site using an XMLHttpRequest and grab the CSRF token from the response and then include said token in its forged request. Token based mitigation is the recommended way to prevent CSRF. It can either be state based, (synchronizer token pattern) or stateless (encrypted/hash based token pattern). Policy Compliance PCI-DSS from Forcepoint 1. Firewall to protect cardholder data Update vender-supplied default passwords protect stored cardholder data Encrypt the transmission of cardholder data Protect all systems from malware Develop and maintain secure systems and applications Limit cardholder data access to authorized personnel Unique IDs for all users with cardholder data access Restrict physical access to cardholder data log and monitor all access to cardholder data and network resources Regularly test security systems and processes Enforce an information security policy for all personnel PCI self-assessment questionnaire to determine compliance level (SAQ). Once you are in compliance and have completed a self-assessment of compliance you can file a formal Attestation of Compliance (AOC). Triaging an attack Source from Rapid7 Step 1: Identify Find artifacts of the incident Looking for the highest value targets involved in the attack Network security monitoring, deeper investigations Find how malware entered the network, what systems it infected, what endpoints it hit Gather logs Extract artifacts look up reputations detonate files in a sandbox Step 2: Map Start investigation after gathering the key indicators of threat Begin piecing the artifacts together Draw a timeline of events What was the entry point -> next place -> next place etc Treat it almost like debugging a piece of code focus on why the infected machine was infected Review audit logs playback monitoring recordings draw a timeline Step 3: Eradicate Prioritize response based upon the highest value targets Swiftly remove malware from the identified systems restore from backups where possible Should be at step 3 as quickly as possible to catch the attack while in progress Remove malware Delete infected assets Restore from backup Security Automation Best Practices Rapid 7 White Paper What is Security Automation? Taking a set of tasks and putting those into an automated system is less prone to human error and becomes more efficient. With a more efficient (repeatable) process, better and faster decisions can be made. Having programming talent on the team is an asset for Security Automation as well as having what a well-defined process looks like in mind.","title":"Get a Security Engineering Job"},{"location":"articles/secEng/#security-engineering","text":"","title":"Security Engineering"},{"location":"articles/secEng/#intro","text":"This is going to be my brain dump of useful interview tips, articles, and papers that I come across that I have found useful in my studies for getting a security engineering job. Security Engineering is one of the hardest paths in computing to break into on your own. I hope this article is helpful to any that stumble upon it.","title":"Intro"},{"location":"articles/secEng/#general-interview-tips","text":"Stay calm and dont take things personally Dont be phased by interviews that dont go well Focus on what you do know and what you are great at","title":"General Interview Tips"},{"location":"articles/secEng/#systems-administration-devops","text":"Cybersecurity requires top notch systems administration skills in order to be successful in implementing new protections on the end devices that need protecting. DevOps knowledge is key if one is to fully understand the systems that they are working with and attempting to ingest logs from. The more stacks and technologies you know the more things you can secure.","title":"Systems Administration &amp; DevOps"},{"location":"articles/secEng/#general-cloud","text":"the cloud is just another way of saying \"someone else is managing my hardware\"","title":"General Cloud"},{"location":"articles/secEng/#azure","text":"This is microsofts cloud platform. It is essentially a more windows enterprise friendly AWS and its admin console can be","title":"Azure"},{"location":"articles/secEng/#aws","text":"lambda functions javascripts that run when an endpoint is hit They serverless backend functions essentially publically accessable","title":"AWS"},{"location":"articles/secEng/#ansible","text":"system administration automation its just a fancy python script that reads a yaml file +","title":"Ansible"},{"location":"articles/secEng/#log-analysis","text":"Windows Linux","title":"Log Analysis"},{"location":"articles/secEng/#programming-tips","text":"","title":"Programming Tips"},{"location":"articles/secEng/#algos","text":"Fastest sort quick sort in most cases","title":"Algos"},{"location":"articles/secEng/#python-syntax-specifics","text":"decorators function wrappers that are functions allow for returning new data and running other functions inside of itself ```python @make_pretty def ordinary(): print(\"I am ordinary\")","title":"Python syntax specifics"},{"location":"articles/secEng/#is-the-same-as","text":"def ordinary(): print(\"I am ordinary\") ordinary = make_pretty(ordinary) ```","title":"is the same as"},{"location":"articles/secEng/#networking-tips","text":"How does traceroute work (different on windows and unix) TCP Flags Syn Synchronize Ack Acknowledge successful receipt of a packet Rst Sent when a packet is received that the receiver was not expecting Urg The receiver will be notified to process the urgent packets before others and will be notified when urgent data has been received Psh Push flag is like the Urg flag but the packets are processed as soon as they are received Fin The finished flag which indicates that there is no more data to be sent after this from the current data stream ECE indicates that peer is ECN capable TTL A part of the IP section of a packet and indicates if the packet is too late to be considered valid Commonly set manually for DNS Records in a resolvers cache speeds up website lookup speed should be set to lower number for local lookups CIDR Classless Interdomain routing No need for class based A, B, C IP worries Define network address as prefix /24 is 24 network bits 8 host bits","title":"Networking Tips"},{"location":"articles/secEng/#security-applications-what-they-do","text":"","title":"Security Applications &amp; What they do"},{"location":"articles/secEng/#firewall","text":"Network edge device Commonly hosts VPN server Analyze traffic based upon rules and filter traffic coming from unsecured or suspicious sources Next Gen firewalls use deep packet inspection which looks at the data within the packet itself","title":"Firewall"},{"location":"articles/secEng/#ids","text":"Network Intrusion Detection System -> NIDS Snort surricata Host Intrusion Detection Systesm -> HIDS File integrity monitoring windows reigstry monitoring Monitoring the state of the system OSSEC + Atomicorp chkrootkit","title":"IDS"},{"location":"articles/secEng/#ips","text":"sits between the edge device of the network (usually firewall) and the devices on the inside It can identify threats in a number of ways: Packet analysis looks at packets for binary patterns compared against a database of common signatures Statistical anomaly detection takes samples of network traffic randomly and compares them to pre-calculated baseline performance level.","title":"IPS"},{"location":"articles/secEng/#siem","text":"Splunk ELK Stack","title":"SIEM"},{"location":"articles/secEng/#soar-tools","text":"phantom socless","title":"SOAR tools"},{"location":"articles/secEng/#crypto-basics","text":"","title":"Crypto Basics"},{"location":"articles/secEng/#common-algorithms","text":"","title":"Common Algorithms"},{"location":"articles/secEng/#https","text":"Hello Contains SSL information about client include sipher suites and max SSL supported Server hello contains the same information and the intended cipher suite and SSL version to be used Cert exchange Server sends over its SSL Cert name of owner the property (domain its attached to) certificate pub key digital signature certificate validity dates Client checks if it has the CA already trusted Server may request that the client proves itself with the same process key exchange","title":"HTTPS"},{"location":"articles/secEng/#authentication-methods","text":"","title":"Authentication methods"},{"location":"articles/secEng/#ldap","text":"","title":"LDAP"},{"location":"articles/secEng/#ldaps","text":"","title":"LDAPS"},{"location":"articles/secEng/#oauth","text":"The first website connects to the second website on behalf of the user, using OAuth, providing the user\u2019s verified identity. The second site generates a one-time token and a one-time secret unique to the transaction and parties involved. The first site gives this token and secret to the initiating user\u2019s client software. The client\u2019s software presents the request token and secret to their authorization provider (which may or may not be the second site). If not already authenticated to the authorization provider, the client may be asked to authenticate. After authentication, the client is asked to approve the authorization transaction to the second website. The user approves (or their software silently approves) a particular transaction type at the first website. The user is given an approved access token (notice it\u2019s no longer a request token). The user gives the approved access token to the first website. The first website gives the access token to the second website as proof of authentication on behalf of the user. The second website lets the first website access their site on behalf of the user. The user sees a successfully completed transaction occurring. OAuth is not the first authentication/authorization system to work this way on behalf of the end-user. In fact, many authentication systems, notably Kerberos, work similarly. What is special about OAuth is its ability to work across the web and its wide adoption. It succeeded with adoption rates where previous attempts failed (for various reasons).","title":"OAUTH"},{"location":"articles/secEng/#web-attacks-tips","text":"","title":"Web Attacks Tips"},{"location":"articles/secEng/#anatomy-of-sqli-and-blind-sqli-attacks","text":"","title":"Anatomy of SQLi and blind SQLi attacks"},{"location":"articles/secEng/#anatomy-of-xss-attack","text":"","title":"Anatomy of XSS attack"},{"location":"articles/secEng/#anatomy-of-csrf-attack","text":"How do you prevent a CSRF attack? Make sure all XSS vulnerabilities have been patched. An XSS can read any page on the site using an XMLHttpRequest and grab the CSRF token from the response and then include said token in its forged request. Token based mitigation is the recommended way to prevent CSRF. It can either be state based, (synchronizer token pattern) or stateless (encrypted/hash based token pattern).","title":"Anatomy of CSRF attack"},{"location":"articles/secEng/#policy-compliance","text":"","title":"Policy Compliance"},{"location":"articles/secEng/#pci-dss","text":"from Forcepoint 1. Firewall to protect cardholder data Update vender-supplied default passwords protect stored cardholder data Encrypt the transmission of cardholder data Protect all systems from malware Develop and maintain secure systems and applications Limit cardholder data access to authorized personnel Unique IDs for all users with cardholder data access Restrict physical access to cardholder data log and monitor all access to cardholder data and network resources Regularly test security systems and processes Enforce an information security policy for all personnel PCI self-assessment questionnaire to determine compliance level (SAQ). Once you are in compliance and have completed a self-assessment of compliance you can file a formal Attestation of Compliance (AOC).","title":"PCI-DSS"},{"location":"articles/secEng/#triaging-an-attack","text":"Source from Rapid7","title":"Triaging an attack"},{"location":"articles/secEng/#step-1-identify","text":"Find artifacts of the incident Looking for the highest value targets involved in the attack Network security monitoring, deeper investigations Find how malware entered the network, what systems it infected, what endpoints it hit Gather logs Extract artifacts look up reputations detonate files in a sandbox","title":"Step 1: Identify"},{"location":"articles/secEng/#step-2-map","text":"Start investigation after gathering the key indicators of threat Begin piecing the artifacts together Draw a timeline of events What was the entry point -> next place -> next place etc Treat it almost like debugging a piece of code focus on why the infected machine was infected Review audit logs playback monitoring recordings draw a timeline","title":"Step 2: Map"},{"location":"articles/secEng/#step-3-eradicate","text":"Prioritize response based upon the highest value targets Swiftly remove malware from the identified systems restore from backups where possible Should be at step 3 as quickly as possible to catch the attack while in progress Remove malware Delete infected assets Restore from backup","title":"Step 3: Eradicate"},{"location":"articles/secEng/#security-automation-best-practices","text":"Rapid 7 White Paper","title":"Security Automation Best Practices"},{"location":"articles/secEng/#what-is-security-automation","text":"Taking a set of tasks and putting those into an automated system is less prone to human error and becomes more efficient. With a more efficient (repeatable) process, better and faster decisions can be made. Having programming talent on the team is an asset for Security Automation as well as having what a well-defined process looks like in mind.","title":"What is Security Automation?"}]}